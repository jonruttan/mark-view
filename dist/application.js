// Generated by CoffeeScript 1.9.1
(function() {
  var $http, app, injector, options, text, url;

  if (document.doctype) {
    return;
  }

  document.documentElement.innerHTML = '';

  text = '';

  url = location.href;

  options = localStorage.options != null ? JSON.parse(localStorage.options) : {
    syntaxHighlight: true
  };

  app = angular.module('app', ['interfaces', 'duScroll', 'ngResource', 'ui.bootstrap', 'ui.select']);

  app.factory('_', function($window) {
    if (typeof $window._ === 'undefined') {
      return null;
    } else {
      return $window._;
    }
  });

  app.directive('tableOfContents', function(_, $document) {
    return {
      restrict: 'A',
      require: '?ngModel',
      link: function(scope, elm, attrs, ngModel) {
        var updateSections;
        updateSections = function() {
          var stack;
          scope.sections = [];
          stack = [scope.sections];
          return angular.forEach($(':header'), function(e) {
            while (e.tagName[1] > stack.length) {
              _.last(stack).push([]);
              stack.push(_.last(_.last(stack)));
            }
            while (stack.length > e.tagName[1]) {
              stack.pop();
            }
            return _.last(stack).push({
              level: e.tagName[1],
              label: angular.element(e).text(),
              element: e
            });
          });
        };
        scope.$on('$destroy', function() {
          return scope.sections = [];
        });
        scope.scrollTo = function(sections) {
          return $document.scrollToElementAnimated(document.getElementById(sections.element.id), 70);
        };
        ngModel.$render = updateSections;
        return updateSections();
      }
    };
  });

  app.config(function(uiSelectConfig) {
    return uiSelectConfig.theme = 'bootstrap';
  });

  app.service('manifestService', function($resource) {
    var assetsResource, manifestResource;
    manifestResource = $resource(chrome.extension.getURL('manifest.json'));
    assetsResource = $resource(chrome.extension.getURL('assets/assets.json'));
    this.getManifest = function() {
      return manifestResource.get();
    };
    this.getAssets = function() {
      return assetsResource.query();
    };
    return this;
  });

  app.run(function(_) {
    var db;
    db = _.load();
    if (!db) {
      db = {
        syntaxHighlight: []
      };
      _.insert(db.syntaxHighlight, {
        id: 'markdown',
        highlight: true,
        style: {
          id: 'sunburst',
          name: 'Sunburst'
        }
      });
      return _.save(db);
    }
  });

  app.controller('appController', function($rootScope, $scope, $location, $http, $timeout, $document, $window, $modal, _, manifestService, markdown) {
    var converter, db, isLocalFile, style;
    db = _.load();
    style = _.get(db.syntaxHighlight, 'markdown');
    $scope.syntaxHighlight = style;
    $scope.manifest = manifestService.getManifest();
    $scope.timeout = 333;
    converter = new $window.Markdown.Converter;
    $window.Markdown.Extra.init(converter, {
      blockRenderer: (new SyntaxHighlighter.highlightjs).render
    });
    isLocalFile = false;
    isLocalFile = /^file:\/\//i.test(url);
    $document.on('visibilitychange', function(event) {
      $scope.timeout = event.target.hidden ? 6667 : 333;
      if (!event.target.hidden) {
        return $scope.$emit('document', {
          dirty: false
        });
      }
    });
    $document.on('scroll', function() {
      return console.log("Document scrolled to " + ($document.scrollLeft()) + " " + ($document.scrollTop()));
    });
    $rootScope.$on('duScrollspy:becameActive', function($event, $element) {
      return console.dir($element);
    });
    $scope.$on('document', function(event, message) {
      var int;
      if (message.dirty) {
        int = new markdown({
          syntaxHighlight: true
        }, message.text, {}, converter);
        $scope.body = int.getHtml();
        $scope.title = int.getTitle();
        $scope.meta = int.getMeta();
        $scope.outline = int.getOutline();
      }
      if (isLocalFile) {
        return $timeout(function() {
          return $http({
            method: 'GET',
            url: url + "?rnd='" + (new Date().getTime())
          }).success(function(data, status, headers, config) {
            data = data.replace(/(href|src)="\/([^"]*)"/g, "$1=\"" + (chrome.extension.getURL('$2')) + "\"");
            return $scope.$emit('document', {
              text: data,
              dirty: data !== message.text
            });
          }).error(function(data, status, headers, config) {
            return null;
          });
        }, $scope.timeout);
      }
    });
    $scope.$emit('document', {
      text: text,
      dirty: true
    });
    $scope.openAbout = function() {
      var modalInstance;
      return modalInstance = $modal.open({
        templateUrl: chrome.extension.getURL('assets/templates/about.tpl.html'),
        controller: 'aboutController'
      });
    };
    return $scope.openOptions = function() {
      var modalInstance;
      modalInstance = $modal.open({
        templateUrl: chrome.extension.getURL('assets/templates/options.tpl.html'),
        controller: 'optionsController'
      });
      return modalInstance.result.then(function(db) {
        console.dir(db);
        return $scope.syntaxHighlight = _.get(db.syntaxHighlight, 'markdown');
      });
    };
  });

  app.controller('aboutController', function($scope, $modalInstance, manifestService) {
    $scope.manifest = manifestService.getManifest();
    $scope.assets = manifestService.getAssets();
    return $scope.close = function(result) {
      return $modalInstance.close(result);
    };
  });

  app.controller('optionsController', function($scope, $modalInstance, _) {
    var db, style;
    db = _.load();
    style = _.get(db.syntaxHighlight, 'markdown');
    $scope.syntaxHighlight = style;
    $scope.syntaxHighlightStyle = {};
    $scope.syntaxHighlightStyles = SyntaxHighlighter.highlightjs.getStyles();
    $scope.close = function(result) {
      return $modalInstance.close(result);
    };
    return $scope.save = function(style) {
      _.save(db);
      return $modalInstance.close(db);
    };
  });

  app.filter('trustAsHtml', function($sce) {
    return function(content) {
      return $sce.trustAsHtml(content);
    };
  });

  app.filter('markdown', function($sce) {
    return function(data) {
      var converter;
      if (typeof data !== 'string') {
        return;
      }
      converter = new Markdown.Converter;
      Markdown.Extra.init(converter);
      return $sce.trustAsHtml(converter.makeHtml(data));
    };
  });

  injector = angular.injector(['ng']);

  $http = injector.get('$http');

  $http({
    method: 'GET',
    url: chrome.extension.getURL('assets/application.html')
  }).success(function(data, status, headers, config) {
    text = document.documentElement.textContent;
    document.open('text/html', 'replace');
    document.write(data.replace(/(href|src)="\/([^"]*)"/g, "$1=\"" + (chrome.extension.getURL('$2')) + "\""));
    document.close();
    return angular.bootstrap(document, ['app']);
  }).error(function(data, status, headers, config) {});

}).call(this);
