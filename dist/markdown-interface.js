// Generated by CoffeeScript 1.10.0
(function() {
  angular.module('interfaces', ['ngLodash']).service('markdown', function($window, lodash) {
    var Markdown;
    return Markdown = (function() {
      function Markdown(options, data, meta1, converter) {
        this.options = options;
        this.data = data != null ? data : null;
        this.meta = meta1 != null ? meta1 : {};
        this.converter = converter;
        this.textOffset = 0;
        this.html = null;
        this.outline = [];
        if (!this.converter) {
          this.converter = new $window.Markdown.Converter;
          $window.Markdown.Extra.init(this.converter);
        }
        if (this.data) {
          this.setData(this.data);
        }
      }

      Markdown.prototype.getData = function() {
        return this.data;
      };

      Markdown.prototype.setData = function(data) {
        this.data = data;
        this.textOffset = 0;
        this.parseMeta();
        this.renderHtml();
        return this;
      };

      Markdown.prototype.getText = function() {
        return this.data.slice(this.textOffset);
      };

      Markdown.prototype.parseSyntaxFromUrl = function(url) {
        var entities;
        entities = url.split('.');
        if (entities.length > 2) {
          return entities[entities.length - 2];
        } else {
          return null;
        }
      };

      Markdown.prototype.parseMeta = function() {
        var e, error, key, meta, results, value;
        results = this.data.match(/(^(-{3,})?[\s\S]*?)^(?:\2|\.{3,})?$/m);
        if (results !== null && results[0] !== this.data) {
          try {
            meta = YAML.parse(results[1]);
            for (key in meta) {
              value = meta[key];
              if (key === null || value === null) {
                meta = {};
                break;
              }
            }
            this.meta = lodash.merge(this.meta, meta);
            if (Object.keys(this.meta).length !== 0) {
              this.textOffset = results[0].length;
            }
          } catch (error) {
            e = error;
            this.meta = {};
          }
        }
        if (this.meta.Title == null) {
          this.meta.Title = unescape(location.href).replace(/^.*[\\\/]/, '');
        }
        if (this.meta.Syntax == null) {
          this.meta.Syntax = this.meta.Filename != null ? this.meta.Filename.replace(/^.*?(\..*?)$/, '$1') : unescape(location.href).replace(/^.*?\/([^\/]+)$/, '$1').replace(/\.(?:lit(.*?))$/i, '$1.md').replace(/\.(?:md|mdown|mkdown|markdown)$/i, '').replace(/^[^.]*\./, '');
          console.log(this.meta.Syntax);
        }
        return this;
      };

      Markdown.prototype.renderHtml = function() {
        var highlighter, hl, idCounters;
        this.html = this.converter.makeHtml(this.getText());
        idCounters = {};
        this.html = this.html.replace(/<h([1-6])(?:\s+id="(.+?)")?>(.*?)<\/h\1>/g, (function(_this) {
          return function(match, level, id, text) {
            if (id == null) {
              id = text.toLowerCase().replace(/(\[.*?\])|(\(.*?\))/g, '').replace(/[–— \n]/g, '-').replace(/[^-_.0-9a-z]/g, '').replace(/^[^a-z]+/, '').replace(/^$/, 'section');
            }
            if (idCounters[id] != null) {
              idCounters[id] += 1;
              id += "-" + idCounters[id];
            } else {
              idCounters[id] = 0;
            }
            return "<h" + level + " id=\"" + id + "\">" + text + "</h" + level + ">";
          };
        })(this));
        if ((this.options.syntaxHighlight != null) && (this.meta.Syntax != null)) {
          highlighter = new SyntaxHighlighter.highlightjs;
          hl = {
            top: void 0
          };
          this.html = this.html.replace(/<pre><code>([\s\S]*?)<\/code><\/pre>/gm, (function(_this) {
            return function(match, code) {
              hl = highlighter.highlight(code, _this.meta.Syntax, hl.top);
              return "<pre class=\"hljs\"><code class=\"language-" + hl.language + "\">" + (hl.value.replace(/&amp;/g, '&')) + "</code></pre>";
            };
          })(this));
        }
        return this.html;
      };

      Markdown.prototype.getTitle = function() {
        if (this.meta.Title != null) {
          return this.meta.Title;
        }
      };

      Markdown.prototype.getHtml = function() {
        return this.html;
      };

      Markdown.prototype.getMeta = function() {
        return this.meta;
      };

      Markdown.prototype.getOutline = function() {
        return this.outline.join('');
      };

      Markdown;

      return Markdown;

    })();
  });

}).call(this);
